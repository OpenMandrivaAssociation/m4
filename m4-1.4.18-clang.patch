diff -up m4-1.4.18/lib/intprops.h.omv~ m4-1.4.18/lib/intprops.h
--- m4-1.4.18/lib/intprops.h.omv~	2018-04-02 23:49:10.872806456 +0200
+++ m4-1.4.18/lib/intprops.h	2018-04-02 23:50:01.925941972 +0200
@@ -246,7 +246,7 @@ verify (TYPE_WIDTH (unsigned int) == UIN
 
 /* True if __builtin_add_overflow_p (A, B, C) works.  */
 #define _GL_HAS_BUILTIN_OVERFLOW_P \
-  (7 <= __GNUC__ || __has_builtin (__builtin_add_overflow_p))
+  __has_builtin (__builtin_add_overflow_p)
 
 /* The _GL*_OVERFLOW macros have the same restrictions as the
    *_RANGE_OVERFLOW macros, except that they do not assume that operands
diff -up m4-1.4.18/lib/xalloc-oversized.h.omv~ m4-1.4.18/lib/xalloc-oversized.h
--- m4-1.4.18/lib/xalloc-oversized.h.omv~	2018-04-02 23:49:34.128868231 +0200
+++ m4-1.4.18/lib/xalloc-oversized.h	2018-04-02 23:49:54.325921820 +0200
@@ -46,7 +46,7 @@ typedef size_t __xalloc_count_type;
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
-#if 7 <= __GNUC__ || __has_builtin (__builtin_add_overflow_p)
+#if __has_builtin (__builtin_add_overflow_p)
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)
 #elif ((5 <= __GNUC__ \
